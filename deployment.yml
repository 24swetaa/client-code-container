apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-monitor-deployment
spec:
  selector:
    matchLabels:
      app: client-monitor-pod
  template:
    metadata:
      labels:
        app: client-monitor-pod
    spec:
    
      containers:
      - name: client-monitor-container
        image: client:v1
        imagePullPolicy: Never
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 80
        volumeMounts:
          - name: response-volume
            mountPath: /app/response
        env:
            - name: ACTION
              value: "dump"
            - name: PODNAME
              value: "test-namespace-deploy-764965b55f-79l9g"
            - name: NAMESPACE 
              value: "dev"
            - name: PID
              value: "1"
            - name: UID
              value: "NO_UID"
            - name: NAME
              value: "NO_NAME"
            - name: DURATION
              value: "NO_DURATION"
            - name: EGRESS_PROVIDER
              value: "NO_EGRESS_PROVIDER"
            - name: TAGS
              value: "NO_TAG"
      volumes: 
        - name: response-volume
          emptyDir: {}


# this section is created to give rbac(role based access control) on our cluster so that we can fetch pod ip address.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: dev # your namespace
rules:
- apiGroups: [ "" ]
  resources: [ "pods", "services"]
  verbs: [ "get", "list", "watch"]
- apiGroups: [ "extensions" ]
  resources: [ "deployments" ]
  verbs: [ "get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-pod-reader
  namespace: dev # your namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pod-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
